import os
import logging
import pandas as pd
import psycopg2
from collections import Counter
from flask import Flask
import threading
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import re

def start_flask():
    app = Flask(__name__)
    @app.route('/')
    def home():
        return "Sicbo Bot is alive!", 200
    @app.route('/healthz')
    def health():
        return "OK", 200
    app.run(host='0.0.0.0', port=10000)
threading.Thread(target=start_flask, daemon=True).start()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
if not BOT_TOKEN or not DATABASE_URL:
    raise Exception("B·∫°n c·∫ßn set c·∫£ BOT_TOKEN v√† DATABASE_URL ·ªü bi·∫øn m√¥i tr∆∞·ªùng!")
logging.basicConfig(level=logging.INFO)

def get_db_conn():
    return psycopg2.connect(DATABASE_URL)

def create_table():
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS history (
                    id SERIAL PRIMARY KEY,
                    input TEXT,
                    actual TEXT,
                    bot_predict TEXT,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            """)
            conn.commit()

def alter_table_add_column_bot_predict():
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("ALTER TABLE history ADD COLUMN IF NOT EXISTS bot_predict TEXT;")
            conn.commit()

def fetch_history_all(limit=10000):
    with get_db_conn() as conn:
        query = """
        SELECT id, input, actual, bot_predict, created_at 
        FROM history 
        ORDER BY id ASC LIMIT %s
        """
        df = pd.read_sql(query, conn, params=(limit,))
    return df

def get_history_count():
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT COUNT(*) FROM history")
            return cur.fetchone()[0]

def insert_prediction_only(prediction):
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO history (bot_predict, created_at) VALUES (%s, %s)",
                (prediction, datetime.now())
            )
            conn.commit()

def update_last_prediction_with_result(input_str, actual):
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            # C·∫≠p nh·∫≠t v√†o d√≤ng cu·ªëi c√πng ch∆∞a c√≥ actual
            cur.execute("""
                UPDATE history
                SET input = %s, actual = %s
                WHERE actual IS NULL
                ORDER BY id DESC LIMIT 1
            """, (input_str, actual))
            conn.commit()

def analyze_trend_and_predict(df_with_actual):
    note = ""
    prediction = None
    if len(df_with_actual) >= 8:
        actuals = df_with_actual['actual'].tolist()
        streak = 1
        last = actuals[-1]
        for v in reversed(actuals[:-1]):
            if v == last:
                streak += 1
            else:
                break
        flip_count = sum([actuals[i]!=actuals[i-1] for i in range(1, len(actuals))])
        flip_rate = flip_count/(len(actuals)-1) if len(actuals)>1 else 0
        acc = sum(df_with_actual['bot_predict']==df_with_actual['actual'])/len(df_with_actual) if 'bot_predict' in df_with_actual else 0

        if streak >= 5:
            note = f"‚ö†Ô∏è Trend {last.upper()} ƒë√£ k√©o d√†i {streak} phi√™n ‚Äì NGUY C∆† ƒê·∫¢O C·∫¶U R·∫§T CAO, n√™n v√†o nh·∫π ƒë·∫£o c·∫ßu ho·∫∑c tr√°nh phi√™n n√†y."
            prediction = "X·ªâu" if last == "T√†i" else "T√†i"
        elif acc < 0.43 and flip_rate > 0.88:
            note = "‚ö†Ô∏è C·∫ßu c·ª±c nhi·ªÖu, t·ªâ l·ªá ƒë√∫ng th·∫•p, n√™n ngh·ªâ ho·∫∑c v√†o c·ª±c nh·∫π ƒë·ªÉ d√≤ s√≥ng."
            prediction = None
        elif streak >= 3:
            note = f"üî• Trend r√µ: {last.upper()} {streak} phi√™n li√™n ti·∫øp! C√≥ th·ªÉ v√†o m·∫°nh theo trend n√†y."
            prediction = last
        elif acc >= 0.48 and flip_rate < 0.87:
            note = "üí° C·∫ßu b√¨nh th∆∞·ªùng, c√≥ th·ªÉ v√†o nh·∫π thƒÉm d√≤ theo x√°c su·∫•t g·∫ßn ƒë√¢y."
            prediction = "T√†i" if df_with_actual['actual'].value_counts().get("T√†i", 0) >= df_with_actual['actual'].value_counts().get("X·ªâu", 0) else "X·ªâu"
        else:
            note = "Kh√¥ng c√≥ trend r√µ, c√≥ th·ªÉ v√†o nh·∫π theo x√°c su·∫•t g·ªëc."
            prediction = "T√†i"
    else:
        note = "Ch∆∞a ƒë·ªß d·ªØ li·ªáu th·ª±c t·∫ø, v√†o nh·∫π theo x√°c su·∫•t g·ªëc."
        prediction = "T√†i"
    return prediction, note

def suggest_best_totals_by_prediction(df_with_actual, prediction, n_last=40, min_ratio=0.5):
    if prediction not in ("T√†i", "X·ªâu") or df_with_actual.empty:
        return [], "Kh√¥ng c√≥ d·ª± ƒëo√°n, kh√¥ng n√™n ƒë√°nh d·∫£i t·ªïng."
    recent = df_with_actual.tail(n_last)
    totals = [sum(int(x) for x in s.split()) for s in recent['input'] if s]
    if prediction == "T√†i":
        eligible = [t for t in range(11, 19)]
    else:
        eligible = [t for t in range(3, 11)]
    total_counts = Counter([t for t in totals if t in eligible])
    if not total_counts:
        return [], "C·∫ßu t·ªïng qu√° nhi·ªÖu, kh√¥ng n√™n ƒë√°nh t·ªïng phi√™n n√†y."
    sorted_totals = [t for t, _ in total_counts.most_common()]
    cumulative, dsum, best = 0, sum(total_counts.values()), []
    for t in sorted_totals:
        cumulative += total_counts[t]
        best.append(t)
        if dsum and cumulative / dsum >= min_ratio:
            break
    if len(best) < 2:
        return [], "‚ö†Ô∏è C·∫ßu t·ªïng ƒëang out trend, kh√¥ng n√™n ƒë√°nh t·ªïng phi√™n n√†y."
    return sorted(best), ""

def reply_summary(df_all, df_with_actual, best_totals, prediction, trend_note, total_note):
    tong = len(df_all)
    # Th·ªëng k√™ ch·ªâ t√≠nh c√°c d√≤ng c√≥ c·∫£ actual v√† bot_predict (t·ª©c l√† ƒë√£ c√≥ d·ª± ƒëo√°n tr∆∞·ªõc ƒë√≥ v√† ƒë√£ nh·∫≠p k·∫øt qu·∫£ th·ª±c t·∫ø)
    df_stat = df_all[df_all['actual'].notnull() & df_all['bot_predict'].notnull()]
    so_du_doan = len(df_stat)
    dung = sum(df_stat['bot_predict'] == df_stat['actual'])
    sai = so_du_doan - dung
    tile = round((dung/so_du_doan)*100, 2) if so_du_doan else 0

    msg = (
        f"S·ªë phi√™n ƒë√£ l∆∞u: {tong}\n"
        f"S·ªë phi√™n ƒë√£ d·ª± ƒëo√°n (T√†i/X·ªâu): {so_du_doan} (ƒê√∫ng: {dung} | Sai: {sai} | T·ªâ l·ªá ƒë√∫ng: {tile}%)\n"
        f"D·ª± ƒëo√°n phi√™n k·∫ø ti·∫øp: {prediction or '-'}\n"
        f"D·∫£i t·ªïng n√™n ƒë√°nh: {', '.join(str(x) for x in best_totals) if best_totals else '-'}\n"
        f"{total_note}\n"
        f"{trend_note}"
    )
    return msg

reset_confirm = {}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    create_table()
    alter_table_add_column_bot_predict()
    m = re.match(r"^(\d{3})$", text)
    m2 = re.match(r"^(\d+)\s+(\d+)\s+(\d+)$", text)
    if m or m2:
        if m:
            numbers = [int(x) for x in m.group(1)]
        else:
            numbers = [int(m2.group(1)), int(m2.group(2)), int(m2.group(3))]
        input_str = f"{numbers[0]} {numbers[1]} {numbers[2]}"
        total = sum(numbers)
        actual = "T√†i" if total >= 11 else "X·ªâu"

        # Update actual cho d√≤ng cu·ªëi ch∆∞a c√≥ actual
        update_last_prediction_with_result(input_str, actual)

        # Fetch l·∫°i l·ªãch s·ª≠ ƒë√£ ƒë·∫ßy ƒë·ªß actual ƒë·ªÉ ph√¢n t√≠ch d·ª± ƒëo√°n cho phi√™n ti·∫øp theo
        df_all = fetch_history_all(10000)
        df_with_actual = df_all[df_all['actual'].notnull()]

        # Ph√¢n t√≠ch trend v√† d·ª± ƒëo√°n cho phi√™n k·∫ø ti·∫øp
        prediction, trend_note = analyze_trend_and_predict(df_with_actual)
        # L∆∞u prediction n√†y v√†o d√≤ng m·ªõi (ch∆∞a c√≥ actual), d√πng cho l·∫ßn nh·∫≠p ti·∫øp theo
        insert_prediction_only(prediction)

        # Th·ªëng k√™ l·∫°i
        df_all = fetch_history_all(10000)
        df_with_actual = df_all[df_all['actual'].notnull()]
        best_totals, total_note = suggest_best_totals_by_prediction(df_with_actual, prediction)

        msg = (
            f"‚úîÔ∏è K·∫øt qu·∫£ th·ª±c t·∫ø phi√™n v·ª´a nh·∫≠p: {actual} (t·ªïng: {total})\n"
            + reply_summary(df_all, df_with_actual, best_totals, prediction, trend_note, total_note)
        )
        await update.message.reply_text(msg)
        return

    await update.message.reply_text(
        "Vui l√≤ng nh·∫≠p d√£y 3 s·ªë k·∫øt qu·∫£ th·ª±c t·∫ø (v√≠ d·ª•: 4 5 6 ho·∫∑c 456)."
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Xin ch√†o! ƒê√¢y l√† Sicbo RealBot.\n"
        "C√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:\n"
        "/start - Xem gi·ªõi thi·ªáu v√† l·ªánh\n"
        "/stats - Xem th·ªëng k√™ d·ªØ li·ªáu, trend, chu·ªói th·∫Øng/thua\n"
        "/count - ƒê·∫øm t·ªïng s·ªë phi√™n ƒë√£ nh·∫≠p\n"
        "/reset - Reset to√†n b·ªô l·ªãch s·ª≠ (C·∫©n th·∫≠n, kh√¥ng th·ªÉ kh√¥i ph·ª•c)\n"
        "/backup - Xu·∫•t file l·ªãch s·ª≠ ra CSV\n"
        "G·ª≠i 3 s·ªë k·∫øt qu·∫£ (v√≠ d·ª•: 3 5 6 ho·∫∑c 356), bot s·∫Ω t·ª± t√≠nh to√°n, th·ªëng k√™, ph√¢n t√≠ch trend v√† d·ª± ƒëo√°n si√™u linh ƒë·ªông!"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    create_table()
    alter_table_add_column_bot_predict()
    df_all = fetch_history_all(10000)
    df_with_actual = df_all[df_all['actual'].notnull()]
    prediction, trend_note = analyze_trend_and_predict(df_with_actual)
    best_totals, total_note = suggest_best_totals_by_prediction(df_with_actual, prediction)
    msg = reply_summary(df_all, df_with_actual, best_totals, prediction, trend_note, total_note)
    await update.message.reply_text(msg)

async def backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    create_table()
    alter_table_add_column_bot_predict()
    df = fetch_history_all(10000)
    if df.empty:
        await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ backup.")
        return
    now_str = pd.Timestamp.now().strftime("%Y-%m-%d_%H-%M")
    path = f"/tmp/sicbo_history_backup_{now_str}.csv"
    df.to_csv(path, index=False)
    await update.message.reply_document(document=open(path, "rb"), filename=f"sicbo_history_backup_{now_str}.csv")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if reset_confirm.get(user_id):
        create_table()
        with get_db_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM history")
                conn.commit()
        reset_confirm[user_id] = False
        await update.message.reply_text("ƒê√£ reset to√†n b·ªô l·ªãch s·ª≠!")
    else:
        reset_confirm[user_id] = True
        await update.message.reply_text(
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ kh√¥ng?\n"
            "G√µ l·∫°i /reset l·∫ßn n·ªØa ƒë·ªÉ x√°c nh·∫≠n."
        )

async def count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    create_table()
    alter_table_add_column_bot_predict()
    count = get_history_count()
    await update.message.reply_text(f"ƒê√£ c√≥ t·ªïng c·ªông {count} phi√™n d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u.")

def main():
    create_table()
    alter_table_add_column_bot_predict()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("backup", backup))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("count", count))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
