import os
import asyncio
import logging
import random
import psycopg2
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# Thi·∫øt l·∫≠p logging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

model_rf = RandomForestClassifier()
model_xgb = XGBClassifier()
model_mlp = MLPClassifier(max_iter=500)

history = []

def extract_features(sequence):
    return [
        sum(sequence),
        max(sequence),
        min(sequence),
        sequence.count(3),
        len(set(sequence)),
        int(sequence == sorted(sequence)),
    ]

def label_result(nums):
    total = sum(nums)
    tai_xiu = "T√†i" if total >= 11 else "X·ªâu"
    chan_le = "Ch·∫µn" if total % 2 == 0 else "L·∫ª"
    is_bao = int(nums[0] == nums[1] == nums[2])
    return tai_xiu, chan_le, is_bao

def prepare_data():
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS results (
        id SERIAL PRIMARY KEY,
        num1 INT, num2 INT, num3 INT,
        tai_xiu TEXT, chan_le TEXT, is_bao INT
    )""")
    cur.execute("SELECT num1, num2, num3, tai_xiu, chan_le, is_bao FROM results ORDER BY id DESC LIMIT 1000")
    rows = cur.fetchall()
    conn.close()

    if len(rows) < 20:
        return None, None

    X, y_tai_xiu, y_chan_le, y_bao = [], [], [], []
    for row in rows:
        nums = list(map(int, row[:3]))
        X.append(extract_features(nums))
        y_tai_xiu.append(1 if row[3] == "T√†i" else 0)
        y_chan_le.append(1 if row[4] == "Ch·∫µn" else 0)
        y_bao.append(row[5])

    return np.array(X), {
        "tai_xiu": np.array(y_tai_xiu),
        "chan_le": np.array(y_chan_le),
        "bao": np.array(y_bao)
    }

def train_models():
    X, y_dict = prepare_data()
    if X is None:
        return False
    model_rf.fit(X, y_dict["tai_xiu"])
    model_xgb.fit(X, y_dict["chan_le"])
    model_mlp.fit(X, y_dict["bao"])
    return True

def predict_next(nums):
    x = np.array([extract_features(nums)])
    tai = model_rf.predict(x)[0]
    chan = model_xgb.predict(x)[0]
    bao_prob = model_mlp.predict_proba(x)[0][1]
    result = f"D·ª± ƒëo√°n: {'T√†i' if tai else 'X·ªâu'} - {'Ch·∫µn' if chan else 'L·∫ª'}\n"
    result += f"‚ú® G·ª£i √Ω: ƒêi·ªÉm {'cao' if tai else 'th·∫•p'} + {'s·ªë ch·∫µn' if chan else 's·ªë l·∫ª'}\n"
    if bao_prob > 0.8:
        result += f"üö® C·∫£nh b√°o: X√°c su·∫•t b√£o cao ({bao_prob*100:.1f}%)\n"
    return result

def save_result_to_db(nums):
    tai_xiu, chan_le, is_bao = label_result(nums)
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute("INSERT INTO results (num1, num2, num3, tai_xiu, chan_le, is_bao) VALUES (%s, %s, %s, %s, %s, %s)",
                (nums[0], nums[1], nums[2], tai_xiu, chan_le, is_bao))
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot d·ª± ƒëo√°n T√†i X·ªâu Sicbo!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.replace(" ", "").isdigit():
        await update.message.reply_text("Vui l√≤ng nh·∫≠p 3 s·ªë li·ªÅn nhau, v√≠ d·ª•: 1 3 2")
        return
    nums = list(map(int, text.strip().split()))
    if len(nums) != 3:
        await update.message.reply_text("C·∫ßn 3 s·ªë. Nh·∫≠p v√≠ d·ª•: 2 5 6")
        return

    save_result_to_db(nums)
    ok = train_models()
    if not ok:
        await update.message.reply_text("Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán. Ti·∫øp t·ª•c nh·∫≠p d·ªØ li·ªáu.")
        return

    result = predict_next(nums)
    await update.message.reply_text(f"üìâ ƒê√£ ghi nh·∫≠n k·∫øt qu·∫£: {nums}\n" + result)

async def main():
    app = Application.builder().token(BOT_TOKEN).concurrent_updates(True).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
