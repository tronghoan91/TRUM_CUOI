import os
import logging
import pandas as pd
import psycopg2
from collections import Counter
from flask import Flask
import threading
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import re

def start_flask():
    app = Flask(__name__)
    @app.route('/')
    def home():
        return "Sicbo Bot is alive!", 200
    @app.route('/healthz')
    def health():
        return "OK", 200
    app.run(host='0.0.0.0', port=10000)
threading.Thread(target=start_flask, daemon=True).start()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
if not BOT_TOKEN or not DATABASE_URL:
    raise Exception("B·∫°n c·∫ßn set c·∫£ BOT_TOKEN v√† DATABASE_URL ·ªü bi·∫øn m√¥i tr∆∞·ªùng!")
logging.basicConfig(level=logging.INFO)

def get_db_conn():
    return psycopg2.connect(DATABASE_URL)

def create_table():
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS history (
                    id SERIAL PRIMARY KEY,
                    input TEXT,
                    actual TEXT,
                    bot_predict TEXT,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            """)
            conn.commit()

def fetch_history_all(limit=10000):
    with get_db_conn() as conn:
        query = """
        SELECT id, input, actual, bot_predict, created_at 
        FROM history 
        ORDER BY id ASC LIMIT %s
        """
        df = pd.read_sql(query, conn, params=(limit,))
    return df

def get_history_count():
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT COUNT(*) FROM history")
            return cur.fetchone()[0]

def insert_to_history(input_str, actual, bot_predict=None):
    with get_db_conn() as conn:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO history (input, actual, bot_predict, created_at) VALUES (%s, %s, %s, %s)",
                (input_str, actual, bot_predict, datetime.now())
            )
            conn.commit()

def suggest_best_totals(df_with_actual):
    if df_with_actual.empty:
        return [11, 12, 13]
    total_list = [sum(int(x) for x in s.split()) for s in df_with_actual['input']]
    c = Counter(total_list)
    common = [k for k, v in c.most_common(3)]
    if len(common) < 3:
        common = [11, 12, 13]
    return common

def analyze_trend_and_predict(df_with_actual):
    note = ""
    prediction = None
    if len(df_with_actual) >= 8:
        actuals = df_with_actual['actual'].tolist()
        streak = 1
        last = actuals[-1]
        for v in reversed(actuals[:-1]):
            if v == last:
                streak += 1
            else:
                break
        flip_count = sum([actuals[i]!=actuals[i-1] for i in range(1, len(actuals))])
        flip_rate = flip_count/(len(actuals)-1) if len(actuals)>1 else 0
        acc = sum(df_with_actual['bot_predict']==df_with_actual['actual'])/len(df_with_actual) if 'bot_predict' in df_with_actual else 0
        if acc < 0.48 or flip_rate > 0.75 or (streak <= 2 and acc < 0.52):
            note = "‚ö†Ô∏è C·∫ßu nhi·ªÖu, t·ªâ l·ªá ƒë√∫ng th·∫•p. N√™n ngh·ªâ ho·∫∑c ch·ªâ quan s√°t."
            prediction = None
        elif streak >= 4:
            note = f"üî• Trend r√µ: {last.upper()} {streak} phi√™n li√™n ti·∫øp! N√™n theo trend n√†y."
            prediction = last
        else:
            note = "C·∫ßu b√¨nh th∆∞·ªùng, ch∆∞a r√µ trend m·∫°nh, v√†o nh·∫π ho·∫∑c quan s√°t."
            prediction = None
    else:
        note = "Ch∆∞a ƒë·ªß d·ªØ li·ªáu th·ª±c t·∫ø ƒë·ªÉ ph√¢n t√≠ch trend."
        prediction = None
    return prediction, note

def reply_summary(df_all, df_with_actual, best_totals, prediction, trend_note):
    tong = len(df_all)
    # Ch·ªâ th·ªëng k√™ c√°c phi√™n bot th·ª±c s·ª± d·ª± ƒëo√°n (T√†i/X·ªâu)
    df_predict = df_with_actual[df_with_actual['bot_predict'].isin(["T√†i", "X·ªâu"])]
    so_du_doan = len(df_predict)
    dung = sum(df_predict['bot_predict'] == df_predict['actual'])
    sai = so_du_doan - dung
    tile = round((dung/so_du_doan)*100, 2) if so_du_doan else 0

    msg = (
        f"S·ªë phi√™n ƒë√£ l∆∞u: {tong}\n"
        f"S·ªë phi√™n ƒë√£ d·ª± ƒëo√°n (T√†i/X·ªâu): {so_du_doan} (ƒê√∫ng: {dung} | Sai: {sai} | T·ªâ l·ªá ƒë√∫ng: {tile}%)\n"
        f"D·ª± ƒëo√°n phi√™n n√†y: {prediction or '-'}\n"
        f"D·∫£i t·ªïng n√™n ƒë√°nh: {', '.join(str(x) for x in best_totals)}\n"
        f"{trend_note}"
    )
    return msg

reset_confirm = {}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    create_table()
    m = re.match(r"^(\d{3})$", text)
    m2 = re.match(r"^(\d+)\s+(\d+)\s+(\d+)$", text)
    if m or m2:
        if m:
            numbers = [int(x) for x in m.group(1)]
        else:
            numbers = [int(m2.group(1)), int(m2.group(2)), int(m2.group(3))]
        input_str = f"{numbers[0]} {numbers[1]} {numbers[2]}"
        total = sum(numbers)
        actual = "T√†i" if total >= 11 else "X·ªâu"

        # L·∫•y l·ªãch s·ª≠ tr∆∞·ªõc khi insert
        df_all = fetch_history_all(10000)
        df_with_actual = df_all[df_all['actual'].notnull()]

        # Ph√¢n t√≠ch trend v√† quy·∫øt ƒë·ªãnh prediction linh ƒë·ªông
        prediction, trend_note = analyze_trend_and_predict(df_with_actual)
        # N·∫øu bot quy·∫øt ƒë·ªãnh d·ª± ƒëo√°n th√¨ ghi v√†o c·ªôt bot_predict
        insert_to_history(input_str, actual, prediction)

        # Th·ªëng k√™ l·∫°i sau khi th√™m
        df_all = fetch_history_all(10000)
        df_with_actual = df_all[df_all['actual'].notnull()]
        best_totals = suggest_best_totals(df_with_actual) if not df_with_actual.empty else [11,12,13]
        msg = reply_summary(df_all, df_with_actual, best_totals, prediction, trend_note)
        await update.message.reply_text(msg)
        return

    await update.message.reply_text(
        "Vui l√≤ng nh·∫≠p d√£y 3 s·ªë k·∫øt qu·∫£ th·ª±c t·∫ø (v√≠ d·ª•: 4 5 6 ho·∫∑c 456)."
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Xin ch√†o! ƒê√¢y l√† Sicbo RealBot.\n"
        "C√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:\n"
        "/start - Xem gi·ªõi thi·ªáu v√† l·ªánh\n"
        "/stats - Xem th·ªëng k√™ d·ªØ li·ªáu, trend, chu·ªói th·∫Øng/thua\n"
        "/count - ƒê·∫øm t·ªïng s·ªë phi√™n ƒë√£ nh·∫≠p\n"
        "/reset - Reset to√†n b·ªô l·ªãch s·ª≠ (C·∫©n th·∫≠n, kh√¥ng th·ªÉ kh√¥i ph·ª•c)\n"
        "/backup - Xu·∫•t file l·ªãch s·ª≠ ra CSV\n"
        "G·ª≠i 3 s·ªë k·∫øt qu·∫£ (v√≠ d·ª•: 3 5 6 ho·∫∑c 356), bot s·∫Ω t·ª± t√≠nh to√°n, th·ªëng k√™, ph√¢n t√≠ch trend v√† d·ª± ƒëo√°n si√™u linh ƒë·ªông!"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    create_table()
    df_all = fetch_history_all(10000)
    df_with_actual = df_all[df_all['actual'].notnull()]
    prediction, trend_note = analyze_trend_and_predict(df_with_actual)
    best_totals = suggest_best_totals(df_with_actual) if not df_with_actual.empty else [11,12,13]
    msg = reply_summary(df_all, df_with_actual, best_totals, prediction, trend_note)
    await update.message.reply_text(msg)

async def backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    create_table()
    df = fetch_history_all(10000)
    if df.empty:
        await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ backup.")
        return
    now_str = pd.Timestamp.now().strftime("%Y-%m-%d_%H-%M")
    path = f"/tmp/sicbo_history_backup_{now_str}.csv"
    df.to_csv(path, index=False)
    await update.message.reply_document(document=open(path, "rb"), filename=f"sicbo_history_backup_{now_str}.csv")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if reset_confirm.get(user_id):
        create_table()
        with get_db_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM history")
                conn.commit()
        reset_confirm[user_id] = False
        await update.message.reply_text("ƒê√£ reset to√†n b·ªô l·ªãch s·ª≠!")
    else:
        reset_confirm[user_id] = True
        await update.message.reply_text(
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ kh√¥ng?\n"
            "G√µ l·∫°i /reset l·∫ßn n·ªØa ƒë·ªÉ x√°c nh·∫≠n."
        )

async def count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    create_table()
    count = get_history_count()
    await update.message.reply_text(f"ƒê√£ c√≥ t·ªïng c·ªông {count} phi√™n d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u.")

def main():
    create_table()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("backup", backup))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("count", count))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
