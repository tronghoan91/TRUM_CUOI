# main.py - Telegram Sicbo Bot v·ªõi ML models, th·ªëng k√™, t∆∞ duy m√¥ ph·ªèng con ng∆∞·ªùi

import os
import re
import random
import numpy as np
import psycopg2
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, filters
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from datetime import datetime

# ========== C·∫•u h√¨nh ==========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")
bot = Bot(token=TOKEN)
app = Flask(__name__)
dispatcher = Dispatcher(bot=bot, update_queue=None, workers=0, use_context=True)

# ========== Database ==========
def get_conn():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def create_table():
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
            CREATE TABLE IF NOT EXISTS sicbo_history (
                id SERIAL PRIMARY KEY,
                result TEXT,
                sum INTEGER,
                is_tai BOOLEAN,
                is_chan BOOLEAN,
                is_bao BOOLEAN,
                prediction TEXT,
                is_correct BOOLEAN,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """)
            conn.commit()

create_table()

# ========== X·ª≠ l√Ω k·∫øt qu·∫£ ƒë·∫ßu v√†o ==========
def parse_input(text):
    numbers = list(map(int, re.findall(r'\d+', text)))
    if len(numbers) != 3:
        return None
    total = sum(numbers)
    tai = total >= 11 and total <= 17 and not (numbers[0] == numbers[1] == numbers[2])
    xiu = not tai
    chan = total % 2 == 0
    le = not chan
    bao = numbers[0] == numbers[1] == numbers[2]
    return {
        "numbers": numbers,
        "sum": total,
        "tai": tai,
        "xiu": xiu,
        "chan": chan,
        "le": le,
        "bao": bao
    }

# ========== Hu·∫•n luy·ªán m√¥ h√¨nh ==========
def train_models(history):
    X, y_tai = [], []
    for row in history:
        n = list(map(int, row[1].split()))
        total = sum(n)
        X.append(n + [total])
        y_tai.append(row[3])  # is_tai

    rf = RandomForestClassifier().fit(X, y_tai)
    xgb = XGBClassifier(verbosity=0).fit(X, y_tai)
    mlp = MLPClassifier(max_iter=500).fit(X, y_tai)

    return rf, xgb, mlp

# ========== D·ª± ƒëo√°n ==========
def predict_next(models, recent_results):
    input_data = []
    for r in recent_results[-1:]:
        n = list(map(int, r[1].split()))
        total = sum(n)
        input_data.append(n + [total])
    rf, xgb, mlp = models
    preds = [
        rf.predict(input_data)[0],
        xgb.predict(input_data)[0],
        mlp.predict(input_data)[0]
    ]
    final = max(set(preds), key=preds.count)
    return final

# ========== Th·ªëng k√™ ==========
def get_stats():
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT COUNT(*), SUM(CASE WHEN is_correct THEN 1 ELSE 0 END) FROM sicbo_history")
            total, correct = cur.fetchone()
            correct = correct or 0
            acc = round(correct / total * 100, 1) if total > 0 else 0.0
            return total, correct, acc

# ========== X·ª≠ l√Ω Telegram ==========
def start(update, context):
    update.message.reply_text("üé≤ G·ª≠i k·∫øt qu·∫£ th·ª±c t·∫ø (VD: 3 4 5) ƒë·ªÉ t√¥i d·ª± ƒëo√°n phi√™n ti·∫øp theo.")

def handle_result(update, context):
    result = parse_input(update.message.text)
    if not result:
        update.message.reply_text("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng 3 s·ªë (VD: 2 3 6).")
        return

    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT * FROM sicbo_history ORDER BY id DESC LIMIT 20")
            history = cur.fetchall()
            models = train_models(history) if history else None

            prediction = predict_next(models, history) if models else random.choice([True, False])
            predicted = "T√†i" if prediction else "X·ªâu"
            chanle = random.choice(["Ch·∫µn", "L·∫ª"])
            bao_warn = ‚ö†Ô∏è C·∫£nh b√°o B√ÉO: X√°c su·∫•t cao!" if random.random() < 0.08 else None

            cur.execute("""
            INSERT INTO sicbo_history (result, sum, is_tai, is_chan, is_bao, prediction, is_correct)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (
                ' '.join(map(str, result["numbers"])),
                result["sum"],
                result["tai"],
                result["chan"],
                result["bao"],
                predicted,
                predicted == ("T√†i" if result["tai"] else "X·ªâu")
            ))
            conn.commit()

    total, correct, acc = get_stats()

    response = f"""‚úÖ ƒê√£ nh·∫≠n KQ th·ª±c t·∫ø: {' + '.join(map(str, result['numbers']))} = {result['sum']} ‚ûú {"T√†i" if result['tai'] else "X·ªâu"} - {"Ch·∫µn" if result['chan'] else "L·∫ª"}

üìà D·ª± b√°o phi√™n ti·∫øp theo:
1Ô∏è‚É£ N√™n v√†o: {predicted} - {chanle}
2Ô∏è‚É£ D·∫£i ƒëi·ªÉm n√™n ƒë√°nh: 10 ‚ûú 13
{bao_warn if bao_warn else ''}
4Ô∏è‚É£ Th·ªëng k√™: {correct} ƒë√∫ng / {total - correct} sai (ƒê·ªô ch√≠nh x√°c: {acc}%)
"""
    update.message.reply_text(response.strip())

# ========== ƒêƒÉng k√Ω handler ==========
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_result))

# ========== Webhook cho Telegram ==========
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "Sicbo Bot ƒëang ch·∫°y."

if __name__ == "__main__":
    app.run(debug=False)
