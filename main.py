import os
import random
import logging
import psycopg2
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from xgboost import XGBClassifier
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng
BOT_TOKEN = os.environ.get("BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")

# K·∫øt n·ªëi PostgreSQL
def get_db_connection():
    conn = psycopg2.connect(DATABASE_URL)
    return conn

def create_table():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sicbo_results (
            id SERIAL PRIMARY KEY,
            result TEXT,
            prediction TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')
    conn.commit()
    cursor.close()
    conn.close()

create_table()

# L∆∞u k·∫øt qu·∫£ th·ª±c t·∫ø v√† d·ª± ƒëo√°n
def save_result(actual: str, prediction: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO sicbo_results (result, prediction) VALUES (%s, %s)",
        (actual, prediction)
    )
    conn.commit()
    cursor.close()
    conn.close()

# H√†m ph√¢n t√≠ch k·∫øt qu·∫£ t·ª´ chu·ªói input

def parse_result(text):
    try:
        parts = list(map(int, text.strip().split(" ")))
        if len(parts) != 3 or not all(1 <= x <= 6 for x in parts):
            return None
        return parts
    except:
        return None

# T√≠nh to√°n d·ª± ƒëo√°n d·ª±a tr√™n l·ªãch s·ª≠

def predict_next():
    conn = get_db_connection()
    df = pd.read_sql("SELECT * FROM sicbo_results ORDER BY id DESC LIMIT 20", conn)
    conn.close()

    if len(df) < 15:
        return "Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n."

    results = [list(map(int, row.split())) for row in df['result']]
    X = [r[:-1] for r in results[:-1]]
    y = [sum(r) for r in results[1:]]

    models = [
        RandomForestClassifier(n_estimators=50),
        XGBClassifier(n_estimators=50, verbosity=0),
        MLPClassifier(max_iter=300)
    ]
    votes = []
    for model in models:
        try:
            model.fit(X, y)
            pred = model.predict([results[-1][:-1]])[0]
            votes.append(pred)
        except Exception as e:
            logger.warning(f"Model error: {e}")

    final_pred = int(sum(votes) / len(votes)) if votes else random.randint(8, 13)
    tai_xiu = "T√†i" if final_pred >= 11 else "X·ªâu"
    chan_le = "Ch·∫µn" if final_pred % 2 == 0 else "L·∫ª"

    bao = results[-1][0] == results[-1][1] == results[-1][2]
    bao_text = "\n‚ö†Ô∏è C√≥ kh·∫£ nƒÉng B√ÉO!" if bao else ""

    return f"üé≤ D·ª± ƒëo√°n ti·∫øp theo:\n- {tai_xiu} - {chan_le}\n- T·ªïng ƒëi·ªÉm d·ª± ƒëo√°n: {final_pred}\n{bao_text}"

# Handler ch√≠nh
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    result = parse_result(text)
    if result:
        prediction_text = predict_next()
        save_result(" ".join(map(str, result)), prediction_text)
        await update.message.reply_text(
            f"‚úÖ ƒê√£ ghi nh·∫≠n k·∫øt qu·∫£: {' '.join(map(str, result))}\n{prediction_text}"
        )
    else:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p k·∫øt qu·∫£ 3 vi√™n x√∫c x·∫Øc, c√°ch nhau b·∫±ng d·∫•u c√°ch. V√≠ d·ª•: 2 5 6")

# L·ªánh b·∫Øt ƒë·∫ßu
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("G·ª≠i k·∫øt qu·∫£ 3 vi√™n x√∫c x·∫Øc (VD: 1 3 6) ƒë·ªÉ bot d·ª± ƒëo√°n phi√™n ti·∫øp theo!")

# Kh·ªüi t·∫°o bot
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
